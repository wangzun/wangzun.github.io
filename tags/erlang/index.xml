<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Erlang on wangzun&#39;s blog</title>
    <link>http://wangzun.github.io/tags/erlang/</link>
    <description>Recent content in Erlang on wangzun&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Jan 2017 14:01:01 +0000</lastBuildDate>
    <atom:link href="http://wangzun.github.io/tags/erlang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>游戏服务器使用协议分析</title>
      <link>http://wangzun.github.io/posts/proto-analyze/</link>
      <pubDate>Wed, 25 Jan 2017 14:01:01 +0000</pubDate>
      
      <guid>http://wangzun.github.io/posts/proto-analyze/</guid>
      <description>

&lt;h4 id=&#34;why:5aa714a3cb22d04be333e3cb231ca965&#34;&gt;why&lt;/h4&gt;

&lt;p&gt;如果要开发一个网络游戏，自然需要在客户端服务器之间进行数据传输，但是数据传输是2进制数据，怎么识别数据呢？这就需要客户端和服务器之间做一个大家都认可的约定。这个约定就是我们说的网络协议。tcp/ip这类协议暂且不谈，这里主要分析应用层的协议。一个协议可以影响到很多方面，包括数据大小，序列化和反序列化的速度，如果一个服务器对性能要求很高，就一定要认真对待网络协议，当然用得很方便，在功能方面也要考虑。&lt;/p&gt;

&lt;h4 id=&#34;now:5aa714a3cb22d04be333e3cb231ca965&#34;&gt;now&lt;/h4&gt;

&lt;p&gt;目前的游戏开发领域，客户端和服务器的开发环境可以说是有很大的不同，使用的语言也大都不一样。这样在统一协议的时候就有很大的麻烦，除非对某些特性有必须的要求，否则大都会去找一些已经存在的协议，这些协议大都使用多年，值得信赖。目前比较出名的有:protobuf,thrift,msgpack等,当然如果对性能要求不高的还可以有json,xml这些选择。protobuf和thrift都是有协议号，每个协议结构的field也有编号，如此协议字段的顺序就不重要了，是快速开发的良好选择。比如你在服务器的某个协议上加一字段，但是客户端还没有来得及加入，但是这并不影响数据传输，加解包，很适合热更新，快速响应。不过要注意，加字段是没影响，但是减少一个字段，如果两边没有同步就会有问题了，这种可能需要特殊处理了。&lt;/p&gt;

&lt;h4 id=&#34;done:5aa714a3cb22d04be333e3cb231ca965&#34;&gt;done&lt;/h4&gt;

&lt;p&gt;协议的性能主要关注数据包大小，加解包速度。为此我做了一个测试：让thitft，protobuf，erlang原生的&amp;rdquo;term_to_binary&amp;rdquo;和&amp;rdquo;binary_to_term&amp;rdquo;以及自己写的一个加解包程序来对同一个数据结构进行加解包，观察它们的大小和速度，所有的代码用erlang写成。数据结构为original():&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list_data(Num) -&amp;gt;
	lists:map(
	  fun(Index) -&amp;gt;
			  &amp;quot;test_list_data&amp;quot; ++ integer_to_list(Index)
	  end,lists:seq(1,Num)).

original() -&amp;gt;
	{person,&amp;quot;wangzun&amp;quot;,&amp;quot;fsfaef83rsfs322g33dd&amp;quot;,&amp;quot;34242555&amp;quot;,list_data(10000),12,{location,&amp;quot;fasfsfaf&amp;quot;,&amp;quot;fafsaa&amp;quot;}}.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个数据结构放在thrift文件里的定义为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Location {
    1:string region,
    2:string country,
}
struct Person{
    1:string name,
    2:string address,
    3:string phone_number,
    4:list&amp;lt;string&amp;gt; groups,
    5:i32 age,
    6:Location location,
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而放在protobuf里定义为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message Person {
	required string name = 1;
	required string address = 2;
	required string phone_number = 3;
	repeated string groups = 4;
	required int32 age = 5;
	optional Location location = 6;
}

message Location
{
    required string region = 1;
    required string country = 2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如此，分别对该数据结构加解包100次，得出的结果为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; erlang term----------------------------------------------------------------
 binanry size : 178991   encode time : 102640  decode time : 132598
 simple proto --------------------------------------------------------------
 binanry size : 168959   encode time : 411586  decode time : 455120
 thrift --------------------------------------------------------------------
 binanry size : 189016   encode time : 1361137  decode time : 1599532
 protobuf ------------------------------------------------------------------
 binanry size : 168957   encode time : 845535  decode time : 2166011
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>erlang有用的小细节</title>
      <link>http://wangzun.github.io/posts/erlang/</link>
      <pubDate>Thu, 21 Jul 2016 16:05:06 +0900</pubDate>
      
      <guid>http://wangzun.github.io/posts/erlang/</guid>
      <description>

&lt;h5 id=&#34;1-erlang-shell用法:9f3b6997f78b7d4fd24f17461ec402ee&#34;&gt;1. erlang shell用法&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;rp(Term)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Prints a term using the record definitions known to the shell. All of Term is printed; the depth is not limited as is the case when a return value is printed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;b()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Prints the current variable bindings.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;f() , f(X)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Removes variable bindings.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;v(N)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Uses the return value of command N in the current command
2&amp;gt; fun() -&amp;gt; ok end.
#Fun&amp;lt;erl_eval.20.54118792&amp;gt;
3&amp;gt;
3&amp;gt; Fun = v(-1).
#Fun&amp;lt;erl_eval.20.54118792&amp;gt;
4&amp;gt; Fun.
#Fun&amp;lt;erl_eval.20.54118792&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2&amp;gt; Pid = self().
3&amp;gt; erlang:spawn(fun() -&amp;gt; Pid ! test end).
&amp;lt;0.38.0&amp;gt;
4&amp;gt; flush().
Shell got test
ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;catch_exception(true)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;没有catch_exception(true)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1&amp;gt; Table = ets:new(test1,[]).
16400
2&amp;gt; ets:info(Table).
[{read_concurrency,false},
 {write_concurrency,false},
 {compressed,false},
 {memory,305},
 {owner,&amp;lt;0.33.0&amp;gt;},
 {heir,none},
 {name,test1},
 {size,0},
 {node,nonode@nohost},
 {named_table,false},
 {type,set},
 {keypos,1},
 {protection,protected}]
3&amp;gt;
3&amp;gt; 1/0.
** exception error: an error occurred when evaluating an arithmetic expression
     in operator  &#39;/&#39;/2
        called as 1 / 0
4&amp;gt;
4&amp;gt; ets:info(Table).
undefined
5&amp;gt; self().
&amp;lt;0.37.0&amp;gt;
6&amp;gt; 1/0.
** exception error: an error occurred when evaluating an arithmetic expression
     in operator  &#39;/&#39;/2
        called as 1 / 0
7&amp;gt; self().
&amp;lt;0.41.0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用catch_exception(true)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;8&amp;gt; catch_exception(true).
false
9&amp;gt;
9&amp;gt; self().
&amp;lt;0.41.0&amp;gt;
10&amp;gt;
10&amp;gt; 1/0.
* exception error: an error occurred when evaluating an arithmetic expression
    in operator  &#39;/&#39;/2
       called as 1 / 0
11&amp;gt; self().
&amp;lt;0.41.0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-erlang-node:9f3b6997f78b7d4fd24f17461ec402ee&#34;&gt;2.erlang node&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;启动分布式节点&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;erl -name test1@0.0.0.0

net_kernel:start([&#39;test1@0.0.0.0&#39;]).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-hidden&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hidden connections are not published on either of the connected nodes
a,b节点为普通节点，c为hidden节点，当a与c连接，b与c连接后，a与b不会连接
net_kernel:connect_node(Node)
nodes()
ets:tab2list(sys_dist)
epmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rpc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-kernel dist_auto_connect never

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;group_leader&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Every process is a member of some process group and all groups have a group leader. All I/O from the group is channeled to the group leader. When a new process is spawned, it gets the same group leader as the spawning process.
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-ets:9f3b6997f78b7d4fd24f17461ec402ee&#34;&gt;3.ets&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;ets:all()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Returns a list of all tables at the node.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ets:info()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ets:new(Name,Op)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ets:first(Tab)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ets:last(Tab)
ets:next(Tab,Key)
ets:prev(Tab,Key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ets:select(Tab,MatchSpec)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ets:fun2ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;4-热更新:9f3b6997f78b7d4fd24f17461ec402ee&#34;&gt;4.热更新&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;c:l(Mod)&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;5-system-limit:9f3b6997f78b7d4fd24f17461ec402ee&#34;&gt;5.system_limit&lt;/h5&gt;

&lt;h5 id=&#34;6-开源库:9f3b6997f78b7d4fd24f17461ec402ee&#34;&gt;6.开源库&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;recon&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>