<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>English Blog on wangzun&#39;s blog</title>
    <link>http://wangzun.github.io/tags/english-blog/</link>
    <description>Recent content in English Blog on wangzun&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Dec 2016 14:01:01 +0800</lastBuildDate>
    <atom:link href="http://wangzun.github.io/tags/english-blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>erlang with soft real-time system</title>
      <link>http://wangzun.github.io/posts/preemptive/</link>
      <pubDate>Sat, 17 Dec 2016 14:01:01 +0800</pubDate>
      
      <guid>http://wangzun.github.io/posts/preemptive/</guid>
      <description>&lt;p&gt;as most erlang progamers know ,erlang is suitable for Distributed, reliable, soft real-time concurrent systems.many companies use erlang to solving their problem, like Whatsapp, RabbitMQ which need a large messge server. other feature is easy to understand but what was the soft real-time system?&lt;/p&gt;

&lt;p&gt;soft real-time system is one of the real-time system which need server response on time, of course there have hard real-time system , just like high frequency trading system ,avionics , etc. they have a common character that have a absolutely deadline . a soft real time system was not so absolutely but can miss few deadlines. like sound, videoï¼Œgame , etc. why erlang can suitable a soft real-time system?&lt;/p&gt;

&lt;p&gt;erlang runtime system was just like a small operating system on computer, when it would create a number of scheduler when the system core numbers are, and scheduler runs two types of jobs: process and ports, every process or port share same time slice, when the time slice exhausted, it would be force tasked off execution, and another waited process or port be scheduled. erlang use preempive multitasking and every process have 2000 reductions, not each erlang function call cost reduction but also BIF, gc, ETS, send function would cost reduction, 2000 reductions means 0.1 ms, that was why erlang can build a soft real-time system. for example, there are 50 task, No.1 task cost 100ms, others cost 0.1ms. when erlang scheduler excuting No.1 task for 0.1ms, the No.1 task will be take off, and another task will executing. the long cost one can&amp;rsquo;t stop the others, if the system require 100ms response, the 49 tasks up to grade, just one can&amp;rsquo;t. the system can be called soft real-time system.&lt;/p&gt;

&lt;p&gt;if you want build soft real-time system, you can use erlang.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>